# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2021 NOI Techpark <info@noi.bz.it>


# see https://docs.gitlab.com/ee/ci/yaml/README.html for all available options

stages:
  - test
  - dockerize

include:
 - project: 'OSTC/infrastructure/pipelines'
   file: 'reuse.yaml'

.pythonreq:
  stage: test
  tags: [ soldademo, docker ]
  image: python:3.8
  script:
    - pip install python-dotenv pytype setuptools wheel
    - pip install .
    - python -c "from flanker.addresslib import address" >/dev/null 2>&1

pytype:
  extends: .pythonreq
  script:
    - !reference [ .pythonreq, script ]
    - pytype --config pytype.cfg aliens4friends

unittests:
  extends: .pythonreq
  script:
    - !reference [ .pythonreq, script ]
    - python -m unittest discover aliens4friends/tests/

reuse:
  tags: [ soldademo, docker ]
  stage: test
  extends: .reuse

.dockerize:
  tags: [ soldademo, docker ]
  stage: dockerize
  image: docker:20.10

  # Run this job automatically, when we are on the main branch
  # or manual, when triggered on any other branch...
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: manual

  variables:
    CI_REGISTRY_BASE: $CI_REGISTRY/oss-compliance/toolchain/aliens4friends
  before_script:
    - apk update && apk add --no-cache git
  script:
    - CI_REGISTRY_IMAGE=$CI_REGISTRY_BASE/$REGISTRY_NAME
    - echo -n $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - test -n "$FOSSY_IP_ADDRESS" && BUILD_ARGS="$BUILD_ARGS --build-arg FOSSY_IP_ADDRESS=$FOSSY_IP_ADDRESS"
    - test -n "$FOSSY_HOSTNAME" && BUILD_ARGS="$BUILD_ARGS --build-arg FOSSY_HOSTNAME=$FOSSY_HOSTNAME"
    - test -n "$FOSSY_SSL_CERT" && BUILD_ARGS="$BUILD_ARGS --build-arg FOSSY_SSL_CERT=$FOSSY_SSL_CERT"
    - test -n "$TINFOILHAT" && BUILD_ARGS="$BUILD_ARGS --build-arg GIT_REF=$(git ls-remote https://git.ostc-eu.org/oss-compliance/toolchain/tinfoilhat.git  HEAD | cut -f 1)"
    - DOCKER_BUILDKIT=1 docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:latest $BUILD_ARGS . -f $DOCKERFILE
    # --secret id=mysecret,src=mysecret.txt
    - docker push $CI_REGISTRY_IMAGE:latest
  needs:
    - pytype
    - reuse
    - unittests

dockerize toolchain:
  extends: .dockerize
  variables:
    REGISTRY_NAME: toolchain
    DOCKERFILE: infrastructure/docker/toolchain.dockerfile

# Install a self-signed certificate to the current toolchain image.
# These ENV variables must be provided from the Gitlab GUI...
# FIXME This is a hard-coded solution to avoid doing this during the
#       execution of each aliens4friends step in the CC pipelines.
dockerize yoctobuild:
  extends: .dockerize
  variables:
    REGISTRY_NAME: yoctobuild
    DOCKERFILE: infrastructure/docker/yoctobuild.dockerfile
    TINFOILHAT: "yes"
    FOSSY_IP_ADDRESS: $FOSSY_IP_ADDRESS
    FOSSY_HOSTNAME: $FOSSY_HOSTNAME
    FOSSY_SSL_CERT: $FOSSY_SSL_CERT
